#!/bin/bash

## Check the condition of each cluster operator for up to 40 minutes
## before timing out of the while loop and moving on to the next
## operator
TIMEOUT=30

## Declare total availale cluster operators variable
TOTAL_AVAIL_OPERTAORS=0

## The default expected condition for each cluster operator
EXPECTED_STATE=True

## Declare the directory container the installer created files
if oc get nodes | grep -q okd
then
    install_dir=okd4
    product=okd4
else
    install_dir=ocp4
    product=ocp4
fi

## Qubinode installer dir
PROJECT_DIR="{{ project_dir }}"

## the kubeadmin password created by the installer
KUBEADMIN_PASS=$(cat "${PROJECT_DIR}/${install_dir}/auth/kubeadmin-password")

## Declare colors
COLOR_RED=`tput setaf 1`
COLOR_GREEN=`tput setaf 2`
COLOR_BLUE=`tput setaf 4`
COLOR_CYAN=`tput setaf 8`
COLOR_RESET=`tput sgr0`

{% raw %}
## Declare array to store all operators
declare -a OPERATORS
OPERATORS=( $(/usr/local/bin/oc get clusteroperators --no-headers=true | awk '{print $1}') )
TOTAL_OPERATORS="${#OPERATORS[@]}"

if [ "$TOTAL_OPERATORS" -le 20 ]
then
    printf "%s\n\n" ""
    printf "%s\n" "    ${COLOR_RED}It appears the cluster did not deploy successfully${COLOR_RESET}"
    printf "%s\n" "    Counted ${COLOR_BLUE}$TOTAL_OPERATORS${COLOR_RESET} cluster operators"
    printf  "%s\n" "    Perhaps delete the cluster ${COLOR_GREEN} ./qubinode-installer -p $product -d${COLOR_RESET}"
    printf  "%s\n" "    and redeploy with ${COLOR_GREEN} ./qubinode-installer -p $product${COLOR_RESET}"
    exit 1
fi

## Iterate on each cluster operator for up to 40 minutes
## until the operator condition is True
for i in "${!OPERATORS[@]}"
do
    COUNT=0
    SLEEP_FOR=5
    operator="${OPERATORS[$i]}"
    while true
    do
        ((COUNT++))
	    OP_STATUS=$(/usr/local/bin/oc get clusteroperator $operator -o=jsonpath='{range .status.conditions[*]}{.type}{" "}{.status}{" "}{.message}{"\n"}{end}'|awk '/Available/ {print $2}')
	    TMP_STATUS=$(echo $OP_STATUS | grep -o True)

        ## Set Operator status base on oc get clusteroperator result
	    if [ "${TMP_STATUS}" != "True" ]
	    then
	        OP_STATUS="False"
	    else
	        OP_STATUS="${TMP_STATUS}"
	    fi
    
        ## Display the status of the operator and the condition
        ## message if the operator condition is not true 
        ## Break condition check if operator is True
        if [ "$OP_STATUS" == "$EXPECTED_STATE" ]
        then
            printf "%s\n" "    Cluster operator ${COLOR_BLUE}$operator${COLOR_RESET} status is ${COLOR_GREEN}$OP_STATUS${COLOR_RESET}"
	        ((TOTAL_AVAIL_OPERTAORS++))
	        break
        else
            printf "%s\n" "    Waiting on cluster operator ${COLOR_BLUE}$operator${COLOR_RESET} status to change from ${COLOR_CYAN}$OP_STATUS${COLOR_RESET} to ${COLOR_GREEN}${EXPECTED_STATE}${COLOR_RESET}"
            ## Check for and approve any pending CSRs
            oc get csr -ojson | jq -r '.items[] | select(.status == {} ) | .metadata.name'|xargs      --no-run-if-empty oc adm certificate approve > /dev/null 2>&1
            sleep $SLEEP_FOR
            let SLEEP_FOR=SLEEP_FOR+5
        fi
    
        ## End operator condition check after 40 minutes
        ## and display operator condition message
	    if [ "$COUNT" -ge "$TIMEOUT" ]
	    then
	        printf "%s\n\n" ""
            printf "%s\n" "    ${COLOR_RED}Timeout waiting on cluster operator${COLOR_RESET} ${COLOR_BLUE}$operator${COLOR_RESET} ${COLOR_RED}status to change from${COLOR_RESET} ${COLOR_CYAN}$OP_STATUS${COLOR_RESET} ${COLOR_RED}to${COLOR_RESET} ${COLOR_GREEN}${EXPECTED_STATE}${COLOR_RESET}"
            printf "%s\n" "    The operator ${COLOR_BLUE}**$operator**${COLOR_RESET} status is:"
	        OP_CONDITION=$(mktemp)
	        /usr/local/bin/oc get clusteroperator $operator -o=jsonpath='{range .status.conditions[*]}{.type}{" "}{.status}{" "}{.message}{"\n"}{end}' > $OP_CONDITION
    
	        while read -r line
	        do 
                printf '%s\n' "      ${COLOR_BLUE}$line${COLOR_RESET}"
	        done < "$OP_CONDITION"
	        printf "%s\n\n" ""
	        break
	    fi
	    
    done

done

## Report cluster login and node information if all cluster operators are up
if [ "$TOTAL_AVAIL_OPERTAORS" -eq "$TOTAL_OPERATORS" ]
then
    OCP_CONSOLE=$(oc get routes -n openshift-console -ojson | jq -r '.items[0].spec.host')
    printf "%s\n\n" ""
    printf "%s\n" "    ${COLOR_GREEN}The OpenShift Cluster is Up${COLOR_RESET}"
    /usr/local/bin/oc get nodes -o wide --no-headers=true| awk 'BEGIN{printf("    %-3s%-50s%-16s%-8s%-7s\n","#","FQDN","External IP","ROLE","STATUS")}{printf("    %-3s%-50s%-16s%-8s%-7s\n",NR,$1,$6,$3,$2)}'
    printf "%s\n" ""
    printf "%s\n" ""
    printf "%s\n" "    ${COLOR_GREEN}Console: https://${OCP_CONSOLE}"${COLOR_RESET}
    printf "%s\n" "    ${COLOR_GREEN}Username: kubeadmin"${COLOR_RESET}
    printf "%s\n" "    ${COLOR_GREEN}Password: $KUBEADMIN_PASS"${COLOR_RESET}
    printf "%s\n" ""

else
    printf "%s\n" ""
    printf "%s\n" "    ${COLOR_RED}Timeout waiting for all cluster operators to come up${COLOR_RESET}"
    printf "%s\n\n" "    Run ${COLOR_GREEN}oc get co${COLOR_RESET} to see all cluster operators"
    printf "%s\n\n" "    Run ${COLOR_GREEN}oc get routes -n openshift-console${COLOR_RESET} to get the console url"
    printf "%s\n\n" "    Run ${COLOR_GREEN}oc get nodes -o wide --no-headers=true${COLOR_RESET} to see all cluster nodes"
    printf "%s\n" "    The installer generated kubeadmin password is here ${PROJECT_DIR}/${install_dir}/auth/kubeadmin-password"
    printf "%s\n" ""

fi

{% endraw %}
exit 0
