---
- name: Define vars fpr control and compute nodes
  set_fact:
    ctrlplane_nodes_count: 0
    compute_nodes_count: 0

- name: Ensure the loadbancer systemd service {{ lb_name }}.service is started
  systemd:
    name: "{{ lb_name }}.service"
    enabled: yes
    state: started
  when: not container_running|bool
  tags: startup

- name: collect all services state
  service_facts:
  register: services_state
  tags: startup

- name: fail if the systemd service {{ lb_name }}.service is not running
  fail:
    msg: "Load balancer service {{ lb_name }}.service is not running!!! Please check, run: systemctl status {{ lb_name }}.service"
  when: services_state.ansible_facts.services[ lb_name  + '.service'].state != 'running'
  tags: startup

- name: list all libvirt vms
  virt:
    command: list_vms
  register: all_vms
  tags: [ start_nodes, rhcos, bootstrap, startup ]

- name: start ocp ctrlplane nodes
  vars:
    vm_name: "{{ ctrlplane_node_name }}-{{ '%00x' |format(item) }}"
  virt:
    name: "{{ vm_name }}"
    state: running
  loop: "{{ range(0, ctrlplane_count|int)|list }}"
  loop_control:
    label: "Starting controle node {{ vm_name }}"
  delay: 10
  when: vm_name in all_vms.list_vms
  tags: [ start_nodes, rhcos, bootstrap, startup]

- name: wait for ctrlplane nodes to be available
  shell: >
    "{{ ocp_client_cmd }} get nodes -o wide --no-headers=true | grep ctrlplane| grep Ready|wc -l"
  ignore_errors: yes
  become: no
  register: ctrlplane_nodes_count
  until: ctrlplane_nodes_count.stdout|int == ctrlplane_count|int
  retries: 18
  delay: 10
  changed_when: False
  tags: [ start_nodes, rhcos, bootstrap, startup]

- name: fail a total {{ ctrlplane_count }} is not found
  fail:
    msg: "Was not able to confirm all {{ ctrlplane_count }} ctrlplane nodes are up"
  when: ctrlplane_nodes_count.stdout|int != ctrlplane_count|int
  tags: [ start_nodes, rhcos, bootstrap, startup]

- name: start ocp compute nodes
  vars:
    vm_name: "{{ compute_node_name }}-{{ '%00x' |format(item) }}"
  virt:
    name: "{{ vm_name }}"
    state: running
  loop: "{{ range(0, compute_node_count|int)|list }}"
  loop_control:
    label: "Starting compute node {{ vm_name }}"
  delay: 10
  when: vm_name in all_vms.list_vms and compute_node_count|int != 0
  tags: [ start_nodes, rhcos, bootstrap, startup]

- name: wait for compute nodes to be available
  shell: >
    "{{ ocp_client_cmd }} get nodes -o wide --no-headers=true | grep compute| grep -v NotReady |grep Ready|wc -l"
  ignore_errors: yes
  become: no
  register: compute_nodes_count
  until: compute_nodes_count.stdout|int == compute_node_count|int
  retries: 18
  delay: 10
  changed_when: False
  when: compute_node_count|int != 0
  tags: [ start_nodes, rhcos, bootstrap, startup]

- name: fail a total {{ compute_node_count }} is not found
  fail:
    msg: "Was not able to confirm all {{ compute_node_count }} compute nodes are up"
  when: compute_nodes_count.stdout|int != compute_node_count|int and compute_node_count|int != 0
  tags: [ start_nodes, rhcos, bootstrap, startup]

- name: Wait 3m for nodes to settle and pods to start
  pause:
    seconds: 180
  tags: [ start_nodes, rhcos, bootstrap, startup]

- name: ensure compute nodes are set to schedulable
  vars:
    vm_name: "{{ compute_node_name }}-{{ '%00x' |format(item) }}.{{ cluster_name }}.{{ ocp4_cluster_domain }}"
  shell: >
    "{{ ocp_client_cmd }} adm uncordon {{ vm_name }}"
  register: schedule_state
  ignore_errors: yes
  loop: "{{ range(0, compute_node_count|int)|list }}"
  delay: 10
  when: vm_name in all_vms.list_vms
  tags: [ start_nodes, rhcos, bootstrap, startup]

- name: Wait 10s for additional CSRs to appear
  pause:
    seconds: 10
  tags: [ start_nodes, rhcos, bootstrap, startup]

- name: Approve all additional Pending CSRs
  async: 900
  poll: 0
  shell: |
    while true
    do
      oc get csr --no-headers | \
        awk '/Pending/ {print $1}' | \
        xargs --no-run-if-empty oc adm certificate approve
      sleep 1
    done
  tags: [ start_nodes, rhcos, bootstrap, startup]